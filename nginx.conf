server {
    listen 2003;
    server_name localhost;
    
    # 日志配置
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    # 设置文件上传最大为2GB
    client_max_body_size 2048M;
    # 设置客户端请求体的缓冲区大小
    client_body_buffer_size 128k;
    # 设置客户端请求体超时时间
    client_body_timeout 600s;
    # 设置客户端请求头超时时间
    client_header_timeout 600s;
    
    # 定义公共的授权验证变量
    
    # pdocr服务代理 - 转发到8000端口并重写路径
    location /pdocr/ {

        rewrite ^/pdocr/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        
        # 超时配置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
            # 关键配置：让nginx在后端不可用时返回特定状态码
    proxy_intercept_errors off;           # 不拦截后端错误
    proxy_next_upstream off;              # 不尝试下一个上游服务器

    # 减少连接超时，快速失败
                 # 连接超时改为3秒

    # 可选：自定义错误处理
    error_page 502 503 504 = @whisper_unavailable;
    }
    
    # mineru服务代理 - 转发到18000端口并重写路径
    location /mineru/ {

        rewrite ^/mineru/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:18000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        
        # 超时配置
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
            # 关键配置：让nginx在后端不可用时返回特定状态码
    proxy_intercept_errors off;           # 不拦截后端错误
    proxy_next_upstream off;              # 不尝试下一个上游服务器

    # 减少连接超时，快速失败
                 # 连接超时改为3秒

    # 可选：自定义错误处理
    error_page 502 503 504 = @whisper_unavailable;
    }
    # mineru文件服务代理 - 转发到12901端口并重写路径
    location /file_mineru/ {

        rewrite ^/file_mineru/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:12901;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        
        # 超时配置
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        proxy_set_header Range $http_range;
            # 关键配置：让nginx在后端不可用时返回特定状态码
    proxy_intercept_errors off;           # 不拦截后端错误
    proxy_next_upstream off;              # 不尝试下一个上游服务器

    # 减少连接超时，快速失败
                 # 连接超时改为3秒

    # 可选：自定义错误处理
    error_page 502 503 504 = @whisper_unavailable;
    }

    location /voicevox/ {

        rewrite ^/voicevox/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:50021;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        
        # 超时配置
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        proxy_set_header Range $http_range;
            # 关键配置：让nginx在后端不可用时返回特定状态码
    proxy_intercept_errors off;           # 不拦截后端错误
    proxy_next_upstream off;              # 不尝试下一个上游服务器

    # 减少连接超时，快速失败
                 # 连接超时改为3秒

    # 可选：自定义错误处理
    error_page 502 503 504 = @whisper_unavailable;
    }



    location /qwen-embedding-4b/ {
        rewrite ^/qwen-embedding-4b/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:30981;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        
        # 超时配置
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        proxy_set_header Range $http_range;
            # 关键配置：让nginx在后端不可用时返回特定状态码
    proxy_intercept_errors off;           # 不拦截后端错误
    proxy_next_upstream off;              # 不尝试下一个上游服务器

    # 减少连接超时，快速失败
                 # 连接超时改为3秒

    # 可选：自定义错误处理
    error_page 502 503 504 = @whisper_unavailable;
    }


    location /coquai/ {
        rewrite ^/coquai/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5003;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;

        # 超时配置
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        proxy_set_header Range $http_range;
            # 关键配置：让nginx在后端不可用时返回特定状态码
    proxy_intercept_errors off;           # 不拦截后端错误
    proxy_next_upstream off;              # 不尝试下一个上游服务器

    # 减少连接超时，快速失败
                 # 连接超时改为3秒

    # 可选：自定义错误处理
    error_page 502 503 504 = @whisper_unavailable;
    }
location /whisper/ {
    rewrite ^/whisper/(.*)$ /$1 break;
    proxy_pass http://127.0.0.1:39000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Authorization $http_authorization;

    # 超时配置
    proxy_connect_timeout 600s;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;

    proxy_set_header Range $http_range;
    proxy_http_version 1.1;
    proxy_buffering off;

    # 关键配置：让nginx在后端不可用时返回特定状态码
    proxy_intercept_errors off;           # 不拦截后端错误
    proxy_next_upstream off;              # 不尝试下一个上游服务器

    # 减少连接超时，快速失败

    # 可选：自定义错误处理
    error_page 502 503 504 = @whisper_unavailable;
}

# 自定义错误处理（可选）
location @whisper_unavailable {
    return 503 '{"error": "Service Unavailable", "message": "Whisper service is starting up", "retry_after": 3}';
    add_header Content-Type application/json;
}



    # 健康检查端点
    location /health {
        return 200 'OK';
        add_header Content-Type text/plain;
    }
    
    # 获取所有location监听地址 (需要认证)
    location /get/all {
     
   
        
        return 200 '{"endpoints": [{"path": "/pdocr/", "method": "ALL", "auth": "true", "argument": "null", "target": "http://139.196.53.82:8000/", "description": "PaddleOCR服务代理"}, {"path": "/mineru/", "method": "ALL", "auth": "true", "argument": "null", "target": "http://139.196.53.82:18000/", "description": "MinerU服务代理"}, {"path": "/health", "method": "GET", "auth": "false", "argument": "null", "target": "local", "description": "健康检查端点"}, {"path": "/get/all", "method": "GET", "auth": "true", "argument": "null", "target": "local", "description": "获取所有监听地址"}, {"path": "/get/auth", "method": "POST", "auth": "false", "argument": "username,password", "target": "local", "description": "获取授权token"}], "server": {"listen_port": 2002, "server_name": "localhost"}}';

        add_header Content-Type application/json;
        proxy_set_header Authorization $http_authorization;

    }
    
    # 获取授权token接口
    location /get/auth {
        # 只允许POST请求
        if ($request_method != POST) {
            return 405 '{"error": "Method Not Allowed", "message": "Only POST method is allowed"}';
        }
        
        # 设置Lua脚本内容
        content_by_lua_block {
            -- 读取请求体
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            
            if not body then
                ngx.status = 400
                ngx.header["Content-Type"] = "application/json"
                ngx.say('{"error": "Bad Request", "message": "Request body is required"}')
                return
            end
            
            -- 解析JSON
            local cjson = require "cjson"
            local ok, data = pcall(cjson.decode, body)
            
            if not ok then
                ngx.status = 400
                ngx.header["Content-Type"] = "application/json"
                ngx.say('{"error": "Bad Request", "message": "Invalid JSON format"}')
                return
            end
            
            -- 验证用户名和密码
            if data.username == "admin" and data.password == "3278440884@qq.com" then
                ngx.header["Content-Type"] = "application/json"
                ngx.say('{"success": true, "required_auth": "MIIEIjANBgkqhkiG9w0BAQEFAAOCBA8AMIIECgKCBAEApg06X2uS+PjAW85nWKMX13/XrZUuWDN/dNOZsAxbDwUelt7UqIack3qKXL1Oa4M5LgPK8QpU0s0KOOsxmScC9XQShnnYomBVpUItGoow+orGAJRpqR3Vi+q1dFm1zOLACk3RTiotntf/WNUC2Pgec+A0rLInDy/i8dIVCK2zTRXalT5K2dzyQiFyilN3u7wZyTaB0ozvGNZ7NeqBX8pA4OuBYSrGYqACum3uYXptIxKMCJDyJvFiulTgmCfBEmPEYYsoNKEKdNOowdMSWmcZiA85BZNl9lvfTf1lQGcpuytkV/MWzCsui7dNdNDIT1E7uAXKGsmloHurR8BSTSZyFe16atsRtsU9Ug1ZPhj3SxrtSYOAfXyYu5/VwyTJE58FZEUaqlmhnNAQKcLc3YqpW208oGC1YWTWP4gcjax8e/k/7VNI/Iwu8WJ3WRB2cAq4Tw0MKEkOs5WiNpujRPZCBAEtP7kxiLZDbyOtVvR+XyoNtq5jZI/7SPNRhVVCXLh+Ci6eoIHsexNhB7D19ckO/4bJY8cACYrR/AutlENZsf38E4DOp9gwNA5R9g2Xq1A8nAoSHt/zHgDYPWBdZJ6D8idiOeQjRtaqzE1SEvATJAd4hHqcOXqXsg1AFE1EXGYo0seuEcpzRbpYjHm+wOdqB64KwlbzN0hhqvsy9iXQiz7qZAZyrQwt39TSN2IJDhRuFmUYNM7rFonI00mL23/L2lEBrK/QeS9TPc9J8uJyexSR2L26VeDKLbWbxeN/g5valcYF/0bOL4lHNqFjUHhBBbWLXXEipZVBu9uaV6TvfJkwcjhWu8deNA6WuHOdPBPq5541ICnzG+a6rVn0iKEWbOByYGLrUaaKkE3DJw0ZLnXdaGXJV/7lXu0mQy1vr6g0+3b1/nR9NCYcz0DWAeeTB5RlIhGGvoYC1oGZOXMZmzQgx7jKDF42nTy6GRWDm/wGRu8asXqY06AEsff9Qa97G75KkVmlbqZ1JBquOSHNTaRgTe/UdgXqFjRJ210ouVq0ETPqClLR6dSkUjFvcEvMKsNg7q4UMSFLFdgflM3vG11j9MvSGLxi2Qk0td1FF7Gt5dH1eB7tf8r/sa3FJzpAW6tKH2cM1QVnYNq5TxvyRr7hmJ3Ik6NDWpmIUNQdZUCzks1cyfkBlC0yjATCZ51OJAhmPzcEOAxWpN89Qu8L2AP7Upw8b4Kcp6OghXwPT+fI518lwa3B6Olk+KEmH+SapoQZ7rW62A9vSMxDLI8pz8N5/AH2VtPyOacyN/JJ4boldFienu1GPK6yOEgjRd4bDcHuDczPzlHvMAXozyI3ihCYFEWtT7uplVK2eiu2w0VgICjB/Vz+m8uaBdd943FaOwIDAQAB"}')
            else
                ngx.status = 401
                ngx.header["Content-Type"] = "application/json"
                ngx.say('{"error": "Unauthorized", "message": "Invalid username or password"}')
            end
        }
    }
    
    # 默认处理 - 返回获取授权接口信息 (不需要认证)
    location / {
        return 200 '[{
    "path": "/get/auth",
    "method":"GET",
    "argument":"null",
    "auth":"true,
    "target": "http://139.196.53.82:18000/get/auth",
    "argument":"{"username":"","password":""}"
    "description": "获取授权token"
}, {
    "path": "/get/all",
    "method":"GET"
    "auth":"true"
    "argument":"null"
    "target": "http://139.196.53.82:18000/get/all",
    "description": "获取所有接口"
}]';
        add_header Content-Type application/json;
    }
}